Index: AM-21/src/main/java/org/am21/client/view/cli/Cli.java
===================================================================
diff --git a/AM-21/src/main/java/org/am21/client/view/cli/Cli.java b/AM-21/src/main/java/org/am21/client/view/cli/Cli.java
--- a/AM-21/src/main/java/org/am21/client/view/cli/Cli.java	
+++ b/AM-21/src/main/java/org/am21/client/view/cli/Cli.java	
@@ -2,9 +2,9 @@
 
 import org.am21.client.view.JSONConverter;
 import org.am21.client.view.View;
-import org.am21.networkRMI.Lobby;
 import org.am21.networkRMI.ClientCallBack;
 import org.am21.networkRMI.IClientInput;
+import org.am21.networkRMI.Lobby;
 
 import java.net.MalformedURLException;
 import java.rmi.AlreadyBoundException;
@@ -254,10 +254,11 @@
     public void askWaitingAction() throws RemoteException, ServerNotActiveException {
         while(!GAME_ON&&!GO_TO_MENU) {
             System.out.println("-------------------------------------------------------------\n"+
-                                Color.WHITE_BOLD_BRIGHT+"\t\t {| Room "+matchID+" |}"+Color.RESET);
+                                Color.WHITE_BOLD + "\t\t {| Room " + matchID + " |}" + Color.RESET);
 
             System.out.println("""
-                    The match has not started yet.\nWaiting for more players to join...
+                    The match has not started yet.
+                    Waiting for more players to join...
                     These are the commands available:
                     leave - Leave Match.
                     rules - Read Game Rules.
@@ -265,7 +266,7 @@
                     To send a message in the Match type ‘/chat’ in the console.
                     To send a message to a online player type ‘/chat[nickname]’ in the console.
                     
-                    Enter the option you wish to select:\040""");
+                    Enter the option you wish to select:""");
 
             String option = readLine();
             if (option.startsWith("/chat")) {
@@ -352,7 +353,7 @@
         int playerNumber = 0;
         do {
             try {
-                System.out.println("Please select the number of players for this match [2 to 4]: ");
+                System.out.print("Please select the number of players for this match [2 to 4]: ");
                 playerNumber = Integer.parseInt(readLine());
                 if (playerNumber < 2 || playerNumber > 4){
                     System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
@@ -401,11 +402,15 @@
     public void showMatchSetup() {
         //TODO: Redo better
         showBoard();
+        askToContinue();
         showCommonGoals();
+        askToContinue();
         showPersonalGoal();
-        System.out.println(Color.WHITE_BOLD_BRIGHT+"The match has started!"+Color.RESET);
+        askToContinue();
+        System.out.println(Color.BLUE_BOLD + "The match has started!" + Color.RESET);
         initPlayer(username);
         showCurrentPlayer();
+        askToContinue();
     }
 
     @Override
@@ -431,8 +436,6 @@
                                JSONConverter.commonGoalScore.get(i) + " points.");
         }
         System.out.println();
-        askToContinue();
-
     }
 
     @Override
@@ -513,17 +516,15 @@
                                           "[__"+Color.CATS+"__][______._][______._][______._][______._]");
         }
         System.out.println();
-        askToContinue();
     }
 
     @Override
     public void showCurrentPlayer() {
         if(JSONConverter.currentPlayer.equals(player)){
-            System.out.println(Color.RED+"[!] > Hey "+player+"!!! It's your turn!!!"+Color.RESET);
+            System.out.println(Color.CYAN + "[!] > Hey " + player + "!!! It's your turn!!!" + Color.RESET);
         }else{
-            System.out.println("It's "+ JSONConverter.currentPlayer+"'s turn. ");
+            System.out.println(Color.CYAN + "[!] > It's "+ JSONConverter.currentPlayer+"'s turn." + Color.RESET);
         }
-        askToContinue();
     }
 
     //TODO: stampa tutte le shelf, dovrebbe stampare una shelf alla volta
@@ -534,17 +535,15 @@
             System.out.print("      " + j +"      ");
         }
         System.out.println();
-        for (String[][] userShelf : JSONConverter.shelf) {
-            for (int i = 0; i < SHELF_ROW; i++) {
-                for (int j = 0; j < SHELF_COLUMN; j++) {
-                    String item = userShelf[i][j] == null? "_________._" : checkColorItem(userShelf[i][j]);
-                    System.out.print("[" + item + "]");
-                }
-                System.out.println();
-            }
+        String[][] userShelf = JSONConverter.shelf.get(playerIndex);
+        for (int i = 0; i < SHELF_ROW; i++) {
+            for (int j = 0; j < SHELF_COLUMN; j++) {
+                String item = userShelf[i][j] == null? "_________._" : checkColorItem(userShelf[i][j]);
+                System.out.print("[" + item + "]");
+            }
+            System.out.println();
         }
         System.out.println();
-        askToContinue();
     }
 
     @Override
@@ -565,7 +564,6 @@
             System.out.println();
         }
         System.out.println();
-        askToContinue();
     }
 
     public String checkColorItem(String item){
@@ -624,22 +622,24 @@
                     String confirm = "";
                     List<Integer> coordinates = askCoordinates();
 
-                    System.out.println("""
+                    while (!confirm.equals("y")) {
+                        System.out.print("""
                             Now you can:
-                            y --> Confirm you choice.
-                            r --> Retry again.
+                             y   --> Confirm you choice.
+                             r   --> Retry again.
                             show --> See a Game Object(Board, Shelf, Goals, ...).
-                            n --> Cancel and exit selection).""");
-
-                    while (!confirm.equals("y")) {
-                        System.out.print("Enter the option you wish to select: ");
+                             n   --> Cancel and exit selection.
+                             
+                             Enter the option you wish to select:\040""");
                         confirm = readLine();
                         switch (confirm) {
                             case "y":
                                 int row = coordinates.get(0);
                                 int column = coordinates.get(1);
                                 if (iClientInputHandler.selectCell(row, column)) {
-                                    System.out.println(Color.YELLOW+"Item selected: "+showItemInCell(row,column)+Color.RESET);
+                                    System.out.println(Color.YELLOW + "Item selected: " +
+                                                       showItemInCell(row,column).replace("_", "") +
+                                                       Color.RESET);
                                     showHand();
                                 }
                                 break;
@@ -647,13 +647,6 @@
                                 return;
                             case "r":
                                 coordinates = askCoordinates();
-                                System.out.println("""
-                                    Now you can:
-                                    y - Confirm you choice.
-                                    n - Cancel your choice.
-                                    r - Retry again.
-                                    show - See a Game Object(Board, Shelf, Goals, ...)
-                                    """);
                                 break;
                             case "show":
                                 askShowObject();
@@ -661,51 +654,21 @@
                         }
                     }
 
-                    System.out.println("""
+                    System.out.print("""
                             Do you want to continue with selection?
                               y   --> Yes.
-                            'any' --> No.""");
+                            'any' --> No.
+                            
+                            Enter the option you wish to select:\040""");
                     selectionConfirm = "y".equals(readLine());
                 } while (selectionConfirm);
         }else{
-
+            System.out.println(Color.RED +
+                               "The conditions to use this command are not respected. Try again" + Color.RESET);
         }
-
-    }
-
-    public List<Integer> askCoordinatesOLD() {
-        showBoard();
-        System.out.println("Enter the coordinates you wish to select [row, column].");
-        int selectRow = 0, selectColumn = 0;
-        do {
-            try {
-                System.out.print("ROW (0 to " + (BOARD_ROW - 1) + "): ");
-                selectRow = Integer.parseInt(readLine());
-                if (selectRow < 0 || selectRow > BOARD_ROW) {
-                    System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
-                }
-            } catch (NumberFormatException e){
-                System.out.println(Color.RED + "Invalid input! Please try again." + Color.RESET);
-            }
-        } while (selectRow < 0 || selectRow > BOARD_ROW);
 
-        do {
-            try {
-                System.out.print("COLUMN (0 to " + (BOARD_COLUMN - 1) + "): ");
-                selectColumn = Integer.parseInt(readLine());
-                if (selectColumn < 0 || selectColumn > BOARD_COLUMN) {
-                    System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
-                }
-            } catch (NumberFormatException e){
-                System.out.println(Color.RED + "Invalid input! Please try again." + Color.RESET);
-            }
-        } while (selectColumn < 0 || selectColumn > BOARD_COLUMN);
+    }
 
-        List<Integer> coordinates = new ArrayList<>();
-        coordinates.add(selectRow);
-        coordinates.add(selectColumn);
-        return coordinates;
-    }
     public List<Integer> askCoordinates() {
         showBoard();
         System.out.println("Enter the coordinates you wish to select [row, column].");
@@ -727,7 +690,7 @@
         int select=0;
         do {
             try {
-                System.out.print(type +" ("+lower_limit+" to " + (upper_limit - 1) + "): ");
+                System.out.print(type + " (" + lower_limit + " to " + (upper_limit - 1) + "): ");
                 select = Integer.parseInt(readLine());
                 if (select < lower_limit || select > upper_limit) {
                     System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
@@ -747,17 +710,19 @@
     public void askDeselection() throws ServerNotActiveException, RemoteException {
         if (!JSONConverter.gamePhase.equals("Insertion")) {
             showHand();
-            System.out.println("""
+            System.out.print("""
                     Are you sure to cancel all of your selection?
                       y   --> Yes.
-                    'any' --> No.""");
-
+                    'any' --> No.
+                    
+                    Enter the option you wish to select:\040""");
             boolean deselectConfirm = "y".equals(readLine());
             if (deselectConfirm) {
                 iClientInputHandler.deselectCards();
             }
         } else {
-            System.out.println(Color.RED +"The conditions to use this command are not respected. Try again"+ Color.RESET);
+            System.out.println(Color.RED +
+                               "The conditions to use this command are not respected. Try again" + Color.RESET);
         }
     }
 
@@ -789,7 +754,7 @@
                             }
 
                         }else{
-                            System.out.println(Color.RED+"Selection Confirm failed"+Color.RESET);
+                            System.out.println(Color.RED + "Selection Confirm failed" + Color.RESET);
                         }
                         return;
                     }
@@ -814,61 +779,22 @@
         }
     }
 
-    public List<Integer> askIndexOLD() {
-        boolean sortConfirm;
-        int position1 = 1, position2 = 2;
-
-        do {
-            do {
-                try {
-                    System.out.print("position1 (1 to " + JSONConverter.currentPlayerHand.size() + "): ");
-                    position1 = Integer.parseInt(readLine());
-                    if (position1 < 1 || position1 > JSONConverter.currentPlayerHand.size()) {
-                        System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
-                    }
-                } catch (NumberFormatException e){
-                    System.out.println(Color.RED + "Invalid input! Please try again." + Color.RESET);
-                }
-            } while (position1 < 1 || position1 > JSONConverter.currentPlayerHand.size());
-
-            do {
-                try {
-                    System.out.print("position2 (1 to " + JSONConverter.currentPlayerHand.size() + "): ");
-                    position2 = Integer.parseInt(readLine());
-                    if (position2 < 1 || position2 > JSONConverter.currentPlayerHand.size()) {
-                        System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
-                    }
-                } catch (NumberFormatException e){
-                    System.out.println(Color.RED + "Invalid input! Please try again." + Color.RESET);
-                }
-            } while (position2 < 1 || position2 > JSONConverter.currentPlayerHand.size());
-
-            System.out.println("You have chosen to swap " + JSONConverter.currentPlayerHand.get(position1 - 1) + " and " +
-                    JSONConverter.currentPlayerHand.get(position2 - 1));
-            System.out.println("Confirm your choice:");
-            System.out.println("1. Confirm.");
-            System.out.println("0. Re-select.");
-
-            sortConfirm ="1".equals(readLine());
-        } while(!sortConfirm);
-        List<Integer> index = new ArrayList<>();
-        index.add(position1 - 1);
-        index.add(position2 - 1);
-
-        return index;
-    }
-
     public List<Integer> askIndex(){
         boolean sortConfirm;
         int position1, position2;
         do {
-            position1 = askTheIndex("Position1", 1, JSONConverter.currentPlayerHand.size()+1);
-            position2 = askTheIndex("Position2", 1, JSONConverter.currentPlayerHand.size()+1);
-            System.out.println("You have chosen to swap " + JSONConverter.currentPlayerHand.get(position1 - 1) + " and " +
-                    JSONConverter.currentPlayerHand.get(position2 - 1));
-            System.out.println("Confirm your choice?");
-            System.out.println("  y  --> Yes");
-            System.out.println("'any'--> Retry");
+            position1 = askTheIndex("Position1", 1, JSONConverter.currentPlayerHand.size() + 1);
+            position2 = askTheIndex("Position2", 1, JSONConverter.currentPlayerHand.size() + 1);
+            System.out.println("You have chosen to swap " +
+                               JSONConverter.currentPlayerHand.get(position1 - 1).replace("_", "") +
+                               " and " +
+                               JSONConverter.currentPlayerHand.get(position2 - 1).replace("_", ""));
+            System.out.print("""
+                    Confirm your choice?
+                      y   --> Yes
+                    'any' --> Retry
+                    
+                    Enter the option you wish to select:\040""");
             sortConfirm ="y".equals(readLine());
         } while(!sortConfirm);
         List<Integer> index = new ArrayList<>();
@@ -879,64 +805,37 @@
     }
 
     public boolean showHand() {
-        System.out.println(player +" has in hand:");
+        System.out.print(player +" has in hand: ");
         if (JSONConverter.currentPlayerHand.isEmpty()){
             System.out.println();
             return false;
         }
         for (int i = 0; i < JSONConverter.currentPlayerHand.size(); i++) {
-            System.out.println(JSONConverter.currentPlayerHand.get(i));
+            System.out.print("[" + JSONConverter.currentPlayerHand.get(i).replace("_", "") + "] ");
         }
         System.out.println();
         return true;
     }
 
-    public int askColumnOLD() {
-        System.out.println("In which column would you like to insert the cards?");
-        boolean columnConfirm;
-        int column = 0;
-         do {
-            do {
-                try {
-                    System.out.print("Column (0 to " + (SHELF_COLUMN - 1) + "): ");
-                    column = Integer.parseInt(readLine());
-                    if (column < 0 || column > SHELF_COLUMN) {
-                        System.out.println(Color.RED + "Invalid number! Please try again." + Color.RESET);
-                    }
-                } catch (NumberFormatException e){
-                    System.out.println(Color.RED + "Invalid input! Please try again." + Color.RESET);
-                }
-            } while (column < 0 || column > SHELF_COLUMN);
-             System.out.println("""
-            You have chosen Column\040""" + column + """
-            Confirm your choice:
-            1. Confirm.
-            0. Re-select.""");
-
-            columnConfirm = "1".equals(readLine());
-        } while (!columnConfirm);
-        return column;
-    }
-
     public int askColumn() {
         System.out.println("In which column would you like to insert the cards?");
         boolean columnConfirm;
         int column;
         do {
             column = askTheIndex("COLUMN",0,SHELF_COLUMN);
-            System.out.println("""
-            You have chosen Column: """ + column + """
+            System.out.print("""
+            You have chosen Column:\040""" + column + """
             Do you confirm?
               y   --> Yes.
-            'any' --> Retry""");
+            'any' --> Retry
+            
+            Enter the option you wish to select:\040""");
 
             columnConfirm = "y".equals(readLine());
         } while (!columnConfirm);
         return column;
     }
 
-
-
     public void handleChatMessage(String option) throws RemoteException {
         String message = option.substring(option.lastIndexOf(" ") + 1);
         String usernameString = option.substring(5);
@@ -945,7 +844,7 @@
         if (matches.length > 1){
             String playerName = matches[1];
             if(iClientInputHandler.sendPlayerMessage(message, playerName)){
-                System.out.println("Message sent to: "+playerName);
+                System.out.println("Message sent to: " + playerName);
             }
         } else {
             if(!iClientInputHandler.sendChatMessage(message)) {
@@ -1013,7 +912,6 @@
     public void showOnlinePlayer() throws RemoteException {
         iClientInputHandler.printOnlinePlayers();
         System.out.println();
-        //askToContinue();
     }
     public void printer(String message){
         System.out.println(message);
@@ -1021,84 +919,116 @@
 
     @Override
     public void showGoalDescription(String CommonGoalCard) {
-        switch (CommonGoalCard){
-            case "CommonGoal2Lines":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal2Lines: \nTwo columns each formed by 6 different types of tiles.""" + Color.RESET);
-                break;
-            case "CommonGoal2Columns":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal2Columns: \nTwo lines each formed by 5 different types of tiles. 
-                        One line can show the same or a different combination of the other line.""" + Color.RESET);
-                break;
-            case "CommonGoal3Column":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal3Column:
-                        Three columns each formed by 6 tiles of maximum three different types. 
-                        One column can show the same or a different combination of another column.""" +
-                        Color.RESET);
-                break;
-            case "CommonGoal4Lines":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal4Lines:
-                        Four lines each formed by 5 tiles of maximum three different types. 
-                        One line can show the same or a different combination of another line.""" +
-                        Color.RESET);
-                break;
-            case "CommonGoal8Tiles":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal8Tiles:
-                        Eight tiles of the same type. 
-                        There’s no restriction about the position of these tiles.""" + Color.RESET);
-                break;
-            case "CommonGoalCorner":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoalCorner:
-                        Four tiles of the same type in the four corners of the bookshelf.""" +
-                        Color.RESET);
-                break;
-            case "CommonGoalDiagonal":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoalDiagonal:
-                        Five tiles of the same type forming a diagonal.""" + Color.RESET);
-                break;
-            case "CommonGoalSquare":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoalSquare:
-                        Two groups each containing 4 tiles of the same type in a 2x2 square.
-                        The tiles of one square can be different from those of the other square.""" +
-                        Color.RESET);
-                break;
-            case "CommonGoalStairs":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoalStairs:
-                        Five columns of increasing or decreasing height.
-                        Starting from the first column on the left or on the right,
-                        each next column must be made of exactly one more tile.
-                        Tiles can be of any type.""" +
-                        Color.RESET);
-                break;
-            case "CommonGoal4Group":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal4Group:
-                        Four groups each containing at least 4 tiles of the same type 
-                        (not necessarily in the depicted shape). 
-                        The tiles of one group can be different from those of another group."""
-                        + Color.RESET);
-                break;
-            case "CommonGoal6Group":
-                System.out.println(Color.YELLOW_BOLD + """
-                        * CommonGoal6Group:
-                        Six groups each containing at least 2 tiles of the same type
-                        (not necessarily in the depicted shape). 
-                        The tiles of one group can be different from those of another group."""
-                        + Color.RESET);
-                break;
-            case "CommonGoalXShape":
-                System.out.println(Color.YELLOW_BOLD +"""
-                        * CommonGoalXShape:
-                        Five tiles of the same type forming an X.""" + Color.RESET);
-                break;
+        switch (CommonGoalCard) {
+            case "CommonGoal2Columns" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal2Columns:
+                    _____
+                    ¦ ≠ ¦
+                    ¦ ≠ ¦
+                    ¦ ≠ ¦
+                    ¦ ≠ ¦ x2    Two columns each formed by 6 different types of tiles.
+                    ¦ ≠ ¦
+                    ¦ ≠ ¦
+                    ¦ ≠ ¦
+                    ¯¯¯¯¯""" + Color.RESET);
+            case "CommonGoal2Lines" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal2Lines:
+                    _________________
+                    ¦ ≠  ≠  ≠  ≠  ≠ ¦       Two lines each formed by 6 different types of tiles.
+                    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯       One line can show the same or a different combination of the other line.
+                           x2""" + Color.RESET);
+            case "CommonGoal3Column" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal3Column:
+                    ¦¯¯¯¦
+                    ¦¯¯¯¦
+                    ¦¯¯¯¦ MAX 3 ≠   Three columns each formed by 6 tiles of maximum three different types.
+                    ¦¯¯¯¦ x3        One column can show the same or a different combination of another column.
+                    ¦¯¯¯¦
+                    ¦¯¯¯¦
+                    ¦¯¯¯¦
+                    ¯¯¯¯¯""" + Color.RESET);
+            case "CommonGoal4Lines" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal4Lines:
+                    ________________
+                    ¦  ¦  ¦  ¦  ¦  ¦        Four lines each formed by 5 tiles of maximum three different types.
+                    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯        One line can show the same or a different combination of another line.
+                          MAX 3 ≠
+                            x2""" + Color.RESET);
+            case "CommonGoal8Tiles" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal8Tiles:
+                        _____   _____
+                        ¦ = ¦   ¦ = ¦
+                        ¯¯¯¯¯   ¯¯¯¯¯
+                    _____   _____   _____
+                    ¦ = ¦   ¦ = ¦   ¦ = ¦       Eight tiles of the same type.
+                    ¯¯¯¯¯   ¯¯¯¯¯   ¯¯¯¯¯       There’s no restriction about the position of these tiles.
+                    _____   _____   _____
+                    ¦ = ¦   ¦ = ¦   ¦ = ¦
+                    ¯¯¯¯¯   ¯¯¯¯¯   ¯¯¯¯¯""" + Color.RESET);
+            case "CommonGoalCorner" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoalCorner:
+                    _____ __________ _____
+                    ¦ = ¦            ¦ = ¦
+                    ¯¯¯¯¯            ¯¯¯¯¯
+                    ¦                    ¦
+                    ¦                    ¦
+                    ¦                    ¦      Four tiles of the same type in the four corners of the bookshelf.
+                    ¦                    ¦
+                    ¦                    ¦
+                    _____            _____
+                    ¦ = ¦            ¦ = ¦
+                    ¯¯¯¯¯ ¯¯¯¯¯¯¯¯¯¯ ¯¯¯¯¯""" + Color.RESET);
+            case "CommonGoalDiagonal" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoalDiagonal:
+                    _____
+                    ¦ = ¦
+                    ¯¯¯¯¯_____
+                         ¦ = ¦
+                         ¯¯¯¯¯_____
+                              ¦ = ¦                 Five tiles of the same type forming a diagonal.
+                              ¯¯¯¯¯_____
+                                   ¦ = ¦
+                                   ¯¯¯¯¯_____
+                                        ¦ = ¦
+                                        ¯¯¯¯¯""" + Color.RESET);
+            case "CommonGoalSquare" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoalSquare:
+                    ________
+                    ¦ =  = ¦        Two groups each containing 4 tiles of the same type in a 2x2 square.
+                    ¦ =  = ¦        The tiles of one square can be different from those of the other square.
+                    ¯¯¯¯¯¯¯¯
+                       x2""" + Color.RESET);
+            case "CommonGoalStairs" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoalStairs:
+                    ¦¯¯¯¦
+                    ¦¯¯¯¦¯¯¯¦                   Five columns of increasing or decreasing height.
+                    ¦¯¯¯¦¯¯¯¦¯¯¯¦               Starting from the first column on the left or on the right,
+                    ¦¯¯¯¦¯¯¯¦¯¯¯¦¯¯¯¦           each next column must be made of exactly one more tile.
+                    ¦¯¯¯¦¯¯¯¦¯¯¯¦¯¯¯¦¯¯¯¦       Tiles can be of any type.
+                    ¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯¯""" + Color.RESET);
+            case "CommonGoal4Group" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal4Group:
+                    ◜____◝
+                     ¦ = ¦
+                     ¦ = ¦   x4     Four groups each containing at least 4 tiles of the same type
+                     ¦ = ¦          (not necessarily in the depicted shape).
+                     ¦ = ¦          The tiles of one group can be different from those of another group.
+                    ◟¯¯¯¯◞""" + Color.RESET);
+            case "CommonGoal6Group" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoal6Group:
+                    ◜____◝
+                     ¦ = ¦   x6     Six groups each containing at least 2 tiles of the same type (not necessarily in the
+                     ¦ = ¦          depicted shape). The tiles of one group can be different from those of another group.
+                    ◟¯¯¯¯◞""" + Color.RESET);
+            case "CommonGoalXShape" -> System.out.println(Color.YELLOW_BOLD + """
+                    * CommonGoalXShape:
+                    _____     _____
+                    ¦ = ¦     ¦ = ¦
+                    ¯¯¯¯¯_____¯¯¯¯¯
+                         ¦ = ¦              Five tiles of the same type forming an X.
+                    _____¯¯¯¯¯_____
+                    ¦ = ¦     ¦ = ¦
+                    ¯¯¯¯¯     ¯¯¯¯¯""" + Color.RESET);
         }
     }
 
@@ -1107,7 +1037,7 @@
         System.out.println(Color.YELLOW_BOLD + """
                 Goal of the game:
                 Players take item tiles from the living room and place them in their bookshelves to score points; the
-                game ends when a player completely fills their bookshelf. The player with more points at the end will 
+                game ends when a player completely fills their bookshelf. The player with more points at the end will
                 win the game. There are 4 ways to score points:
                 1. Personal Goal card
                     The personal goal card grants points if you match the highlighted spaces with the corresponding item
@@ -1153,7 +1083,7 @@
                 The living room will be refiled when, at the end of your turn, on the board there are only item tiles
                 without any other adjacent tile, i.e. the next player can only take single tiles.
                 Put the item tiles left on the board back into the bag. Then, draw new item tiles from the bag and
-                place them randomly in all the spaces of the board (remember that spaces with dots are only available\s
+                place them randomly in all the spaces of the board (remember that spaces with dots are only available
                 in 3- or 4-player games).
                 """ + Color.RESET);
         askToContinue();
@@ -1201,4 +1131,4 @@
         }
         System.out.println();
     }
-}
+}
\ No newline at end of file
Index: AM-21/src/main/java/org/am21/client/view/cli/Color.java
===================================================================
diff --git a/AM-21/src/main/java/org/am21/client/view/cli/Color.java b/AM-21/src/main/java/org/am21/client/view/cli/Color.java
--- a/AM-21/src/main/java/org/am21/client/view/cli/Color.java	
+++ b/AM-21/src/main/java/org/am21/client/view/cli/Color.java	
@@ -7,8 +7,11 @@
     // Regular Colors. Normal color, no bold, background color etc.
     RED("\033[0;31m"),      // RED
     YELLOW("\033[0;33m"),   // YELLOW
+    CYAN("\033[0;36m"),     // CYAN
 
     YELLOW_BOLD("\033[1;33m"),  // YELLOW
+    BLUE_BOLD("\033[1;34m"),    // BLUE
+    WHITE_BOLD("\033[1;37m"),   // WHITE
 
     GREEN_BOLD_BRIGHT("\033[1;92m"),    // GREEN
     YELLOW_BOLD_BRIGHT("\033[1;93m"),   // YELLOW
